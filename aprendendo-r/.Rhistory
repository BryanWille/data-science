library(e1071) # inicia o pacote
install.packages("e1071") # instala um pacote
library(e1071) # inicia o pacote
library(e1071) # inicia o pacote
library(e1071) # inicia o pacote
detach("package:e1071", unload=TRUE) # descarregando
remove.packages("e0171") # remove o pacote.
detach("package:e1071", unload=TRUE) # descarregando
install.packages("e1071") # instala um pacote
library(e1071) # iniciar o pacote
install.packages("e1071")
class(sigma)
sigma = 20
class(sigma)
sigma = 20L #Onde L força a ser Integer
class(sigma)
logico = TRUE # ou T mas precisa ser maiusculo
logico = F # ou FALSE
caractere = "Texto" # ou 'Texto'
logico = TRUE # ou T mas precisa ser maiusculo
logico = F # ou FALSE
caractere = "Texto" # ou 'Texto'
class(logico)
logico = TRUE # ou T mas precisa ser maiusculo
logico = F # ou FALSE
caractere = "Texto" # ou 'Texto'
class(logico)
class(caractere)
logico = TRUE # ou T mas precisa ser maiusculo
logico = F # ou FALSE
caractere = "Texto" # ou 'Texto'
class(logico)
class(caractere)
sigma = 20
class(sigma)
c = 2
d = 4
(c + d) * d
e = (c + d) * d
e
a = 1
b = 2
a < 2 # TRUE
b == a # FALSE
a = 1
b = 2
a < 2 # TRUE
b == a # FALSE
sqrt(2500)
sqrt(2500)
sqrt(2500)
abs(-50)
sqrt(2500)
abs(-325)
c = 2
d = 4
c ** 2
(c + d) * d #Printa pois não está atribuindo a ninguém
e = (c + d) * d
e # Printa pois não está atribuindo a ninguém
c = 2
d = 4
c ** 3
(c + d) * d #Printa pois não está atribuindo a ninguém
e = (c + d) * d
e # Printa pois não está atribuindo a ninguém
c = 2
d = 4
c ** 8
(c + d) * d #Printa pois não está atribuindo a ninguém
e = (c + d) * d
e # Printa pois não está atribuindo a ninguém
c = 2
d = 4
c ** 8 # Potência que nem python
4 / 3
(c + d) * d #Printa pois não está atribuindo a ninguém
e = (c + d) * d
e # Printa pois não está atribuindo a ninguém
c = 2
d = 4
c ** 8 # Potência que nem python
4 / 3 # Decimal pois ó tipo é numeric
4 / 3L
(c + d) * d #Printa pois não está atribuindo a ninguém
e = (c + d) * d
e # Printa pois não está atribuindo a ninguém
c = 2
d = 4
c ** 8 # Potência que nem python
4 / 3 # Decimal pois ó tipo é numeric
4L / 3L
(c + d) * d #Printa pois não está atribuindo a ninguém
e = (c + d) * d
e # Printa pois não está atribuindo a ninguém
c = 2
d = 4
c ** 8 # Potência que nem python
4 / 3 # Decimal pois ó tipo é numeric
4L / 3L # Continua decimal
4 % 2 # 0
c = 2
d = 4
c ** 8 # Potência que nem python
4 / 3 # Decimal pois ó tipo é numeric
4L / 3L # Continua decimal
4 // 2 # 0
c = 2
d = 4
c ** 8 # Potência que nem python
4 / 3 # Decimal pois ó tipo é numeric
4 %/% 3L # Parte inteira
(c + d) * d #Printa pois não está atribuindo a ninguém
e = (c + d) * d
e # Printa pois não está atribuindo a ninguém
c = 2
d = 4
c ** 8 # Potência que nem python
4 / 3 # Decimal pois ó tipo é numeric
4 %/% 3L # Parte inteira
(c + d) * d #Printa pois não está atribuindo a ninguém
e = (c + d) * d
e # Printa pois não está atribuindo a ninguém
c = 2
d = 4
c ** 8 # Potência que nem python
4 / 3 # Decimal pois ó tipo é numeric
4 %/% 3L # Parte inteira da divisão
4 %% 3 # Resto da Divisão
(c + d) * d #Printa pois não está atribuindo a ninguém
e = (c + d) * d
e # Printa pois não está atribuindo a ninguém
x
x
x
x = c(1, 2, 3, 4, 5, 6)
x
x[1]
x[1] = 10
x[1]
x[1]
x = c(1, 2, 3, 4, 5, 6)
x[1]
x[1] = 10
x[1] = 10
x[1]
Y = c("ab", "bc", "cd");
Y
Y
class(Y)
```{r}
x = c(1, 2, 3, 4, 5, 6) # Vetores só possuem um tipo.
x
x[1] # Vetores começam no 1, diferente das outras linguagens.
x[1] = 10
x[1]
# Podemos ter outros tipos
Y = c("ab", "bc", "cd");
Y
class(Y)
Z = c(1L, 2L, 3L)
Z
class(Z)
```{r}
x = c(1, 2, 3, 4, 5, 6) # Vetores só possuem um tipo.
x
x[1] # Vetores começam no 1, diferente das outras linguagens.
x[1] = 10
x[1]
# Podemos ter outros tipos
Y = c("ab", "bc", "cd") # String
Y
class(Y)
Z = c(1L, 2L, 3L) # Integer
Z
class(Z)
```{r}
```{r}
```{r}
```{r}
x = c(1, 2, 3, 4, 5, 6) # Vetores só possuem um tipo.
x
x[1] # Vetores começam no 1, diferente das outras linguagens.
x[1] = 10
x[1]
# Podemos ter outros tipos
Y = c("ab", "bc", "cd") # String
Y
class(Y)
Z = c(1L, 2L, 3L) # Integer
Z
class(Z)
vetor <- 1:30
vetor <- 1:30
vetor <- 1:30
x = c(1, 2, 3, 4, 5, 6) # Vetores só possuem um tipo.
x
x[1] # Vetores começam no 1, diferente das outras linguagens.
x[1] = 10
x[1]
# Podemos ter outros tipos
Y = c("ab", "bc", "cd") # String
Y
class(Y)
Z = c(1L, 2L, 3L) # Integer
Z
class(Z)
# Também pode ser criado assim:
vetor <- 1:30
x = c(1, 2, 3, 4, 5, 6) # Vetores só possuem um tipo.
x
x[1] # Vetores começam no 1, diferente das outras linguagens.
x[1] = 10
x[1]
# Podemos ter outros tipos
Y = c("ab", "bc", "cd") # String
Y
class(Y)
Z = c(1L, 2L, 3L) # Integer
Z
class(Z)
# Também pode ser criado assim:
vetor <- 1:30
vetor
VADeaths # matriz já pronta do R
#Criação de Matriz
# matriz(data=vetor, nrow=NumeroDeLinhas, ncol = NumeroColunas, byRow=PorLinhaOuColuna T | F)
#Primeiro precisa de um vetor
vetor <- 1:20
A <- matriz(vetor, 4, 5);
VADeaths # matriz já pronta do R
#Criação de Matriz
# matriz(data=vetor, nrow=NumeroDeLinhas, ncol = NumeroColunas, byRow=PorLinhaOuColuna T | F)
#Primeiro precisa de um vetor
vetor <- 1:20
A <- matrix(vetor, 4, 5);
A
VADeaths # matriz já pronta do R
#Criação de Matriz
# matriz(data=vetor, nrow=NumeroDeLinhas, ncol = NumeroColunas, byRow=PorLinhaOuColuna T | F)
#Primeiro precisa de um vetor
vetor <- 1:20
A <- matrix(vetor, 4, 7);
A
VADeaths # matriz já pronta do R
#Criação de Matriz
# matriz(data=vetor, nrow=NumeroDeLinhas, ncol = NumeroColunas, byRow=PorLinhaOuColuna T | F)
#Primeiro precisa de um vetor
vetor <- 1:20
A <- matrix(vetor, 4, 5);
A
VADeaths # matriz já pronta do R
#Criação de Matriz
# matriz(data=vetor, nrow=NumeroDeLinhas, ncol = NumeroColunas, byRow=PorLinhaOuColuna T | F)
#Primeiro precisa de um vetor
vetor <- 1:20
A <- matrix(vetor, 4, 5, byRow=T); # Caso o número de elementos seja diferente
VADeaths # matriz já pronta do R
#Criação de Matriz
# matriz(data=vetor, nrow=NumeroDeLinhas, ncol = NumeroColunas, byRow=PorLinhaOuColuna T | F)
#Primeiro precisa de um vetor
vetor <- 1:20
A <- matrix(vetor, 4, 5, byRow=T); # Caso o número de elementos seja diferente
VADeaths # matriz já pronta do R
#Criação de Matriz
# matriz(data=vetor, nrow=NumeroDeLinhas, ncol = NumeroColunas, byRow=PorLinhaOuColuna T | F)
#Primeiro precisa de um vetor
vetor <- 1:20
A <- matrix(vetor, 4, 5, byrow=T); # Caso o número de elementos seja diferente
# vai haver reciclagem dos números anteriores.
A
VADeaths # matriz já pronta do R
#Criação de Matriz
# matriz(data=vetor, nrow=NumeroDeLinhas, ncol = NumeroColunas, byRow=PorLinhaOuColuna T | F)
#Primeiro precisa de um vetor
vetor <- 1:20
A <- matrix(vetor, 4, 5, byrow=F); # Caso o número de elementos seja diferente
# vai haver reciclagem dos números anteriores.
A
VADeaths # matriz já pronta do R
#Criação de Matriz
# matriz(data=vetor, nrow=NumeroDeLinhas, ncol = NumeroColunas, byRow=PorLinhaOuColuna T | F)
#Primeiro precisa de um vetor
vetor <- 1:20
A <- matrix(vetor, 4, 5, byrow=T); # Caso o número de elementos seja diferente
# vai haver reciclagem dos números anteriores.
A
VADeaths # matriz já pronta do R
#Criação de Matriz
# matriz(data=vetor, nrow=NumeroDeLinhas, ncol = NumeroColunas, byRow=PorLinhaOuColuna T | F)
#Primeiro precisa de um vetor
vetor <- 1:20
A <- matrix(vetor, 4, 5, byrow=T); # Caso o número de elementos seja diferente
# vai haver reciclagem dos números anteriores.
A
B <- matrix(vetor, 4, 5, byrow=F);
B
#Outra maneira é usando o CBINd e Rbind
#Criamos novamente os vetores primeiros
col1 <- c("MG", "SP", "RJ")
col2 <- c("MT", "GO", "BR")
col3 <- c("PR", "RS", "SC")
cbind(col1, col2, col3)
cbind
#Outra maneira é usando o CBINd e Rbind
#Criamos novamente os vetores primeiros
col1 <- c("MG", "SP", "RJ")
col2 <- c("MT", "GO", "BR")
col3 <- c("PR", "RS", "SC")
cbind(col1, col2, col3)
rbind(col1, col2, col3)
VADeaths # matriz já pronta do R
VADeaths # matriz já pronta do R
colnames(VADeaths) # Nome colunas
rownames(VADeaths) # Nome Linhas
VADeaths # matriz já pronta do R
colnames(VADeaths) # Nome colunas
rownames(VADeaths) # Nome Linhas
#Só o primeiro Elemento
VADeaths[1,1]
#Só o primeiro Elemento
VADeaths[1,1]
#Só a primeira linha
VADeaths[1,0]
#Só a primeira linha
VADeaths[0,1]
#Só o primeiro Elemento
VADeaths[1,1]
#Só a primeira linha
VADeaths[1,]
#Só a primeira linha
VADeaths[,1]
#Só o primeiro Elemento
VADeaths[1,1]
#Só a primeira linha
VADeaths[1,]
#Só a primeira coluna
VADeaths[,1]
#Só o primeiro Elemento
VADeaths[1,1]
#Só a primeira linha
VADeaths[1,]
#Só a primeira coluna
VADeaths[,-1]
#Só o primeiro Elemento
VADeaths[1,1]
#Só a primeira linha
VADeaths[1,]
#Só a primeira coluna
VADeaths[,-4]
#Só o primeiro Elemento
VADeaths[1,1]
#Só a primeira linha
VADeaths[1,]
#Só a primeira coluna
VADeaths[,4]
#Só o primeiro Elemento
VADeaths[1,1]
#Só a primeira linha
VADeaths[1,]
#Só a primeira coluna
VADeaths[,1]
#Linhas 1 até 3
VADeaths[1:3,]
#Só o primeiro Elemento
VADeaths[1,1]
#Só a primeira linha
VADeaths[1,]
#Só a primeira coluna
VADeaths[,1]
#Linhas 1 até 3
VADeaths[1:3,]
#Colunas 1 3 4
VADeaths[,c(1, 3, 4)]
VADeaths
#Só o primeiro Elemento
VADeaths[1,1]
#Só a primeira linha
VADeaths[1,]
#Só a primeira coluna
VADeaths[,1]
#Linhas 1 até 3
VADeaths[1:3,]
#Colunas 1 3 4
VADeaths[,c(1, 3, 4)]
longley # DF do R
longleu[,1:4] # Se lê como uma matriz
longley # DF do R
longley[,1:4] # Se lê como uma matriz
longley # DF do R
#longley[,1:4] # Se lê como uma matriz
longley # DF do R
#longley[,1:4] # Se lê como uma matriz
longley # DF do R
#longley[,1:4] # Se lê como uma matriz
longley # DF do R
#longley[,1:4] # Se lê como uma matriz
longley # DF do R
#longley[,1:4] # Se lê como uma matriz
longley # DF do R
#longley[,1:4] # Se lê como uma matriz
longley # DF do R
#longley[,1:4] # Se lê como uma matriz
longley # DF do R
#longley[,1:4] # Se lê como uma matriz
longley
longley # DF do R
longley # DF do R
longley # DF do R
longley
longley
longley[,1:4]
#Colunas podem aser acessadas com $ ou com seu nome
lonley$Unemployed
longley
longley[,1:4]
#Colunas podem aser acessadas com $ ou com seu nome
longley$Unemployed
longley['Unemployed']
ability.cov # lista padrão
# Essa lista possui $cov que é uma matriz
# $center que é um int
# $n.obs que tbm é um int
ability.cov # lista padrão
ability.cov$cov
# Essa lista possui $cov que é uma matriz
# $center que é um int
# $n.obs que tbm é um int
ability.cov # lista padrão
ability.cov$cov
# Essa lista possui $cov que é uma matriz
# $center que é um int
# $n.obs que tbm é um int
ability.cov # lista padrão
ability.cov$cov
class(ability.cov$cov)
# Essa lista possui $cov que é uma matriz
# $center que é um int
# $n.obs que tbm é um int
ability.cov # lista padrão
ability.cov$cov
class(ability.cov$cov)
# Essa lista possui $cov que é uma matriz
# $center que é um int
# $n.obs que tbm é um int
ability.cov # lista padrão
ability.cov$cov
class(ability.cov$cov)
clas(ability.cov$n.obs)
# Essa lista possui $cov que é uma matriz
# $center que é um int
# $n.obs que tbm é um int
ability.cov # lista padrão
ability.cov$cov
class(ability.cov$cov)
clas(ability.cov$n.obs)
# Essa lista possui $cov que é uma matriz
# $center que é um int
# $n.obs que tbm é um int
ability.cov # lista padrão
ability.cov$cov
class(ability.cov$cov)
class(ability.cov$n.obs)
# Essa lista possui $cov que é uma matriz
# $center que é um int
# $n.obs que tbm é um int
ability.cov # lista padrão
ability.cov$cov
class(ability.cov$cov) #matrix
class(ability.cov$center) #int
class(ability.cov$n.obs) #numeric
# Essa lista possui $cov que é uma matriz
# $center que é um int
# $n.obs que tbm é um int
ability.cov # lista padrão
ability.cov$cov
class(ability.cov$cov) #matrix
class(ability.cov$center) # numeric
class(ability.cov$n.obs) #numeric
#se pode acessar e manipular estruturas diretamente nela
ability.cov$cov[,1:4]
# Essa lista possui $cov que é uma matriz
# $center que é um int
# $n.obs que tbm é um int
ability.cov # lista padrão
ability.cov$cov
class(ability.cov$cov) #matrix
class(ability.cov$center) # numeric
class(ability.cov$n.obs) #numeric
#se pode acessar e manipular estruturas diretamente nela
ability.cov$cov[,c(1,3,5)]
states.region
states.region
state.region
getwd() #Podem não retornar nada
#São delimitadas por ()
#quando não se delimita abre uma caixa de erro
getwd
getwd() #Podem não retornar nada
#São delimitadas por ()
#quando não se delimita abre uma caixa de erro
getwd
funcaoQualquer <- function(x){
y = 22 * x + 2
return(y)
}
print(funcaoQUalquer(4))
funcaoQualquer <- function(x){
y = 22 * x + 2
return(y)
}
print(funcaoQualquer(4))
